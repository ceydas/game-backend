services:
  app:
    image: backend-engineering-case-study:2.0
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    networks:
      - 'local-network'
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      mysqldb:
          condition: service_healthy

  mysqldb:
    image: mysql:8.0.28-oracle
    container_name: case-mysqldb
    restart: always
    environment:
      MYSQL_DATABASE: 'mysql-db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    networks:
      - 'local-network'
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "--silent" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: bitnami/kafka:latest
    container_name: case-kafka
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
    ports:
      - '9092:9092'
    networks:
      - 'local-network'
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: case-zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - 'local-network'

  redis:
    image: redis
    container_name: case-redis
    restart: always
    hostname: case-redis
    ports:
      - '6379:6379'
    networks:
      - 'local-network'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - redis-data:/data

volumes:
  mysql-data:
  redis-data:

networks:
  local-network:
    driver: bridge